services:
  # Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:$TRAEFIK_VERSION
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
#    profiles: ["core", "all"]
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      socket_proxy:
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entrypoints.web.address=:801
      - --entrypoints.websecure.address=:4431
      - --entrypoints.traefik.address=:8080
      - --entrypoints.ping.address=:8081
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --api=true
      - --api.dashboard=true
      - --api.insecure=true
      - --ping=true
      #- --serversTransport.insecureSkipVerify=true
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Disable for Socket Proxy. Enable otherwise.
      - --providers.docker.endpoint=tcp://socket-proxy:2375 # Enable for Socket Proxy. Disable otherwise.
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.websecure.http.tls.certresolver=dns-cloudflare
      - --entrypoints.websecure.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.websecure.http.tls.domains[0].sans=*.$DOMAINNAME
      # - --entrypoints.websecure.http.tls.domains[1].main=$DOMAINNAME_2 # Pulls main cert for second domain
      # - --entrypoints.websecure.http.tls.domains[1].sans=*.$DOMAINNAME_2 # Pulls wildcard cert for second domain
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      # - --metrics.prometheus=true
      # - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      # - --metrics.prometheus.addEntryPointsLabels=true
      # - --metrics.prometheus.addrouterslabels=true
      # - --metrics.prometheus.addServicesLabels=true
      # - --metrics.influxdb2=true
      # - --metrics.influxdb2.address=http://192.168.1.111:8086
      # - --metrics.influxdb2.token=$INFLUXDB_TOKEN
      # - --metrics.influxdb2.org=zHome
      # - --metrics.influxdb2.bucket=traefik-hs
      # - --metrics.influxdb2.addEntryPointsLabels=true
      # - --metrics.influxdb2.addrouterslabels=true
      # - --metrics.influxdb2.addServicesLabels=true
      # - --metrics.influxdb2.pushInterval=30s
      # - --metrics.influxdb2.additionallabels.host=$DOMAINNAME_HS
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 5s
      retries: 3
    ports:
      - target: 801
        published: 801
        protocol: tcp
        mode: host
      - target: 4431
        published: 4431
        protocol: tcp
        mode: host
      - target: 8080 # need to enable --api.insecure=true
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/appdata/$SHD_HOST/traefik/rules:/rules # Dynamic File Provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Enable if not using Socket Proxy
      - $DOCKERDIR/appdata/$SHD_HOST/traefik/acme:/acme # Certs File
      - $DOCKERDIR/logs/$SHD_HOST/traefik:/logs # Traefik logs
      - type: bind
        source: $DOCKERDIR/appdata/$SHD_HOST/traefik/acme/acme.json
        target: /acme.json # Certs File
    environment:
      - TZ=$TZ
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cf_dns_api_token
      - DOMAINNAME
    secrets:
      - cf_dns_api_token
      - basic_auth_credentials
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      # Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      # Healthcheck/ping
      - "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME`) && Path(`/ping`)"
      - "traefik.http.routers.ping.tls=true"
      - "traefik.http.routers.ping.tls.options=tls-opts@file"
      - "traefik.http.routers.ping.service=ping@internal"
      # Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" # For Authelia Authentication
    depends_on:
      socket-proxy:
        condition: service_started
